/*
Gumroad tutorial: https://0xca0a.gumroad.com/l/B4N4N4S
-------------------------------------------------------------------------------
Model auto-generated by: https://github.com/pmndrs/gltfjsx
Author: thesidekick (https://sketchfab.com/thesidekick)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/banana-dda3a1f707a94c52bed79578e120937c
Title: Banana
*/

import { createRoot } from 'react-dom/client'
import { Suspense, useRef, useState ,useEffect, useLayoutEffect} from 'react'
import './index.css'
import Overlay from './layout/Overlay'
import Overlay2 from './layout/Overlay2'
import { FadeIn,lightTheme,darkTheme,VideoDiv, LeftMiddle, LeftMiddleScreen2,LeftMiddleScreen3, RoomDiv, Screen1, Screen2, Screen3,ScreenBlank, BottomCenter, TextRoom,ScreenRoom, DarkLightSwitch} from './layout/styles'
import MoonIcon from "./components/icons/MoonIcon";
import SunIcon from "./components/icons/SunIcon";
import Switch from "./components/Switch";

import Bananas from './Bananas'
import Room from './components/Room'
import {gsap } from "gsap"
import { ScrollTrigger} from 'gsap/all'
import { ThemeProvider } from 'styled-components'
import videoEdit from "./public/Edit1.mp4"

// Comment the above and uncomment the following to import the WebGL BG lazily for faster loading times
// const Bananas = lazy(() => import('./Bananas'))
gsap.registerPlugin(ScrollTrigger)

function App() {
  const [speed, set] = useState(1)
  const [fontSize, setFontSize] = useState(40);
  const [hiddenScreen1, setHiddenScreen1] = useState(false);
  const [theme, setTheme] = useState('light');
  const roomRef = useRef(null);
  const screen2Ref = useRef(null);
  const screen3Ref = useRef(null); 
  const animationRef = useRef(null);
  const animation2Ref = useRef(null);


  const toggleTheme  = () =>{
    if(theme === "dark"){
    setTheme("light")
    setDarkMode("light")
    }else{
      setTheme("dark")
      setDarkMode("dark")
    }
  }


  const setDarkMode = (mode) => {
    if(mode == "dark")
    {
      console.log("darkkk")
      // document.querySelector("body").setAttribute("background","#426177")
      document.body.style.backgroundColor = "#1f1826"
    }else{

      console.log("lighhtt")

      // document.querySelector("body").setAttribute("background","#E0B59A")
      document.body.style.backgroundColor = "#E3DAC9";

    }
  }

  useEffect(()=>{
    const el = roomRef.current;
    const t = screen2Ref.current;
    const t3 = screen3Ref.current;
    const an = animationRef.current;
    const tl = gsap.timeline({
      scrollTrigger:{
        trigger:t,
        endTrigger:t3,
        scrub: 1,
        toggleActions: "restart none none none",
        // markers:{
        //   endColor:"black",
        //   startColor:"black"
        // }
      },
    });
    tl.to(el, {
      x:-400,
      
    })
    .to(el,{
      x:400,
    })

    ScrollTrigger.create({
      trigger:t,
      markers:true,
      toggleClass: "fadeSlow"
    })

  }, [])


  useEffect(()=>{
    const an = animationRef.current
    const an2 = animation2Ref.current
    gsap.to(an,{
      scrollTrigger:{
        trigger:an,
        toggleClass: "show",
        start:"top 50%",
        end: "top -10%",
        markers:true
      }
    })
    gsap.to(an2,{
      scrollTrigger:{
        trigger:an2,
        toggleClass: "show",
        start:"top 50%",
        end: "top -10%",
        markers:true
      }
    })

  },[])

  return (
    <>
    <ThemeProvider  theme= {theme=== "dark" ? darkTheme: lightTheme}>

   {/* {hiddenScreen1 == false ?  <Screen1 >
      <Suspense fallback={null}>
          <Bananas speed={speed} />
          <FadeIn />
        </Suspense>
        <Overlay />
        <LeftMiddle>
          <input type="range" min="0" max="10" value={speed} step="1" onChange={(e) => set(e.target.value)} />
        </LeftMiddle>
        <BottomCenter>
          <button onClick={()=> {setHiddenScreen1(true)}}>
            click me
          </button>
        </BottomCenter>
    </Screen1>
   :
} */}
      

   {/* <Screen1 >
      <Suspense fallback={null}>
          <Bananas speed={speed} />
        </Suspense>
        <Overlay />
        <LeftMiddle>
          <input type="range" min="0" max="10" value={speed} step="1" onChange={(e) => set(e.target.value)} />
        </LeftMiddle>
        <BottomCenter>
          <button onClick={()=> {setHiddenScreen1(true)}}>
            click me
          </button>
        </BottomCenter>
    </Screen1> */}


      <ScreenRoom >
        <RoomDiv ref ={roomRef} >
          {/* <Room/> */}
        </RoomDiv>
        <Overlay2/>
        <DarkLightSwitch>
          <SunIcon />
          <Switch toggleTheme = {toggleTheme} isDarkTheme={theme === "dark"} />
          <MoonIcon />
        </DarkLightSwitch>
    
      </ScreenRoom>


      <Screen2 ref={screen2Ref} >

        <TextRoom ref={animationRef} className="textShow">
        <LeftMiddleScreen2>
          <input type="range" min="0" max="10" value={fontSize} step="1" onChange={(e) => setFontSize(e.target.value)} />
        </LeftMiddleScreen2>
          <div>
            <h1>
              camera facuta cu spline
            </h1>
            <h1>
              camera facuta cu spline
            </h1>
            <h1>
              camera facuta cu spline
            </h1>
            <h1>
              camera facuta cu spline
            </h1>

            <h1>
              camera facuta cu spline
            </h1>
       
            </div>
        </TextRoom>
      </Screen2>

      <ScreenBlank  >
        

      </ScreenBlank>

      <Screen3  >
        
        <TextRoom ref={animation2Ref} className="textShow">
        <LeftMiddleScreen3>
          <input type="range" min="40" max="100" value={fontSize} step="10" onChange={(e) => setFontSize(e.target.value)} />
        </LeftMiddleScreen3>
        <div>
            <h1 style={{"font-size":`${fontSize}px`}} >
              camera facuta cu spline111
            </h1>
            <h1 ref={screen3Ref}>
              camera facuta cu spline
            </h1>
            <h1>
              camera facuta cu spline
            </h1>
            <h1>
              camera facuta cu spline
            </h1>
          </div>

      
        </TextRoom>
      </Screen3>

      <ScreenBlank  >
        

        </ScreenBlank>
        <ScreenBlank  >
        

        </ScreenBlank>

        <ScreenBlank  >
          <VideoDiv>
            <video src={videoEdit} autoPlay loop muted/>
          </VideoDiv>

        </ScreenBlank>

      </ThemeProvider>

    </>
  )
}

createRoot(document.getElementById('root')).render(<App />)
